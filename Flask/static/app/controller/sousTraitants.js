/*
 * File: app/controller/sousTraitants.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('dalpeApp.controller.sousTraitants', {
    extend: 'Ext.app.Controller',

    models: [
        'sousTraitant'
    ],
    stores: [
        'sousTraitants',
        'specialites',
        'chantiers',
        'specialitesLinkSoustraitants'
    ],
    views: [
        'editSousTraitantWindow',
        'windowAddSpecialite'
    ],

    refs: {
        searchField: '#sousTraitantsGrid #searchText',
        comboSpecialites: '#comboSpecialites',
        comboAddSpecialites: '#comboAddSpecialites',
        sousTraitantsGrid: '#sousTraitantsGrid'
    },

    control: {
        "#sousTraitantsGrid #searchText": {
            change: 'onTextfieldChange'
        },
        "#sousTraitantsGrid #refresh": {
            click: 'onRefreshClick'
        },
        "#sousTraitantsGrid #comboSpecialites": {
            select: 'onComboSpecialitesSelect'
        },
        "#sousTraitantsPanel": {
            activate: 'onSousTraitantsPanelActivate'
        },
        "#addSousTraitant": {
            click: 'onAddSousTraitantClick'
        },
        "#editSousTraitant": {
            click: 'onEditSousTraitantClick'
        },
        "editSousTraitantWindow #annuler": {
            click: 'onAnnulerClick'
        },
        "editSousTraitantWindow #enregistrer": {
            click: 'onEnregistrerClick'
        },
        "#addSpecialite": {
            click: 'onAddSpecialiteClick'
        }
    },

    onTextfieldChange: function(field, newValue, oldValue, eOpts) {
        this.refreshGrid()
        .then(function(){
            field.focus();
        });

    },

    onRefreshClick: function(tool, e, owner, eOpts) {
        this.reloadSousTraitantsStore();
    },

    onComboSpecialitesSelect: function(combo, record, eOpts) {
        this.refreshGrid();

    },

    onSousTraitantsPanelActivate: function(component, eOpts) {
        this.refreshGrid();

    },

    onAddSousTraitantClick: function(button, e, eOpts) {
        //On s'assure que le store des links specialites/sous traitant est vide
        //var myStore = Ext.getStore('specialiteLinkSousTraitant');
        //myStore.proxy.extraParams = '';
        //myStore.removeAll();
        this.currentSpecialites = [];
        this.loadSpecialiteLinkSoustraitantsStore(this.currentSpecialites);
        Ext.widget('editSousTraitantWindow').show();
    },

    onEditSousTraitantClick: function(button, e, eOpts) {
        this.editSousTraitant();
    },

    onAnnulerClick: function(button, e, eOpts) {
        button.up('window').close();
    },

    onEnregistrerClick: function(button, e, eOpts) {
        //On va chercher les infos du form
        var myForm = Ext.getCmp('editSousTraitantWindow').down('form').getForm();
        if (! myForm.isValid()) {
            return;
        }
        var mySousTraitant = myForm.getRecord();

        if (!mySousTraitant) {
            var sousTraitantModel = this.getSousTraitantModel();
            mySousTraitant = new sousTraitantModel();
        }
        mySousTraitant.set(myForm.getValues());

        //Un peu broche a fouin...
        var store = this.getSpecialitesLinkSoustraitantsStore();
        mySousTraitant.set('specialites', store.collect('name'));

        if (! mySousTraitant.get('id')) {
            //POST
            mySousTraitant.getProxy().appendId=false; //bug fix pour eviter d'appender un slah a la fin de l'url
        }

        mySousTraitant.save({
            scope:this,
            callback:function(){
                button.up('window').close();
                this.refreshGrid();
                this.getComboSpecialites().store.load();
            }
        });
        mySousTraitant.getProxy().appendId=true;
    },

    onAddSpecialiteClick: function(button, e, eOpts) {
        var specialite = this.getComboAddSpecialites().getValue();
        this.addOrRemoveSpecialite(specialite, 'add');
        button.up('window').close();
    },

    addOrRemoveSpecialite: function(specialite, operation) {

        if (operation === 'add') {
            this.currentSpecialites.push({name:specialite});

        }
        else if (operation === 'remove') {

            this.currentSpecialites = Ext.Array.filter(this.currentSpecialites, function(s){
                return s.name != specialite;
            });
        }
        this.loadSpecialiteLinkSoustraitantsStore(this.currentSpecialites);

    },

    refreshGrid: function() {
        var me = this;

        return me.reloadSousTraitantsStore()
        .then(function(){
            var store = me.getSousTraitantsStore();
            store.clearFilter(true);
            me.applyQuickSearch();
            me.applySpecialiteFilter();
        	return RSVP.resolve();
        });

    },

    loadSpecialiteLinkSoustraitantsStore: function(specialites) {
        var store = this.getSpecialitesLinkSoustraitantsStore();
        store.removeAll();

        store.loadData(specialites);

    },

    init: function() {
        this.currentSpecialites = [];
    },

    editSousTraitant: function() {
        //On prend le record selectionne
        var selectedRecord = this.getSousTraitantsGrid().selModel.getSelection()[0];

        if (!selectedRecord) {
            Ext.Msg.alert('Attention','Vous devez selectionner un sous traitant...').setWidth(200);
            return;
        }


        //On retourne chercher le data dans la db, au cas ou un autre user ait modifie la fiche
        var sousTraitantModel = this.getSousTraitantModel();
        sousTraitantModel.load(selectedRecord.get('id'),{
            callback:function(sousTraitant){
                myForm.getForm().loadRecord(sousTraitant);
            }
        });



        //On affiche la fenetre
        var editSousTraitantWindow = Ext.widget('editSousTraitantWindow');

        editSousTraitantWindow.show();

        //On load le soustraitant selecitonne dans le form
        var myForm = editSousTraitantWindow.down('form');

        this.currentSpecialites = Ext.clone(selectedRecord.get('specialites'));
        this.loadSpecialiteLinkSoustraitantsStore(this.currentSpecialites);
    },

    reloadSousTraitantsStore: function(params) {
        var me = this;
        var promise = new RSVP.Promise(function(resolve, reject) {
            var store = me.getSousTraitantsStore();
            store.removeAll();
            store.getProxy().extraParams = params;
            store.load({
                callback:function(){
                    resolve();
                }
            });

        });

        return promise;

    },

    filterSousTraitantsStoreWithText: function() {
        //On va chercher la valeur du text search
        var newValue = this.getSearchField().value;

        var sousTraitantsStore = this.getSousTraitantsGrid().store;
        sousTraitantsStore.clearFilter();
        sousTraitantsStore.filter([
        {filterFn: function(item) {
            if (item.get("name") )
            {
                return (item.get("name").toLowerCase().indexOf(newValue.toLowerCase()) != -1);
            }
            return false;
        }}

        ]);



    },

    confirmAddSousTraitant: function(btn, text) {
        if (btn == 'ok')
        {
            var model = this.getSousTraitantModel();

            // create a record
            var newRecord = Ext.create(model);
            newRecord.data.name = text;
            SousTraitants.create(newRecord.data,function(){
                this.getSearchField().setValue(text);
            },this);


        }
    },

    getSelectedSousTraitant: function() {
        var sousTraitantGrid = Ext.ComponentQuery.query('#sousTraitantsGrid');
        if (sousTraitantGrid[0].selModel.selected.items)
        {
            return sousTraitantGrid[0].selModel.selected.items[0];

        }
        return false;

    },

    applySpecialiteFilter: function() {
        //On prend la valeur du comboSpecialite
        var specialiteId = this.getComboSpecialites().getValue();

        if ( specialiteId && specialiteId > 0) {

            var store = this.getSousTraitantsStore();
            store.filter([
            {filterFn: function(item) {
                return Ext.Array.contains(
                Ext.Array.pluck(item.get('specialites'), 'id'),
                specialiteId
                );
            }}
            ]);
        }
    },

    applyQuickSearch: function() {
        var newValue = this.getSearchField().getValue();
        //On filtre le store en local
        var regFind = new RegExp(newValue,"i");
        var store = this.getSousTraitantsStore();
        store.filter([
        {filterFn: function(item) {
            return (regFind.test(item.get("name")) || regFind.test(item.get("contactName"))  );
        }}
        ]);
    }

});
